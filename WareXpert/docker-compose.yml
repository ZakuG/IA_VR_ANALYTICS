version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: warexpert_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: warexpert
      POSTGRES_PASSWORD: warexpert123
      POSTGRES_DB: warexpert_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warexpert"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: warexpert_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: warexpert_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://warexpert:warexpert123@db:5432/warexpert_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python app.py

  # Celery Worker (for async tasks)
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: warexpert_celery
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://warexpert:warexpert123@db:5432/warexpert_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    command: celery -A app.celery worker --loglevel=info

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
